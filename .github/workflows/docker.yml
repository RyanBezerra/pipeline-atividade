name: Docker Build and Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job para construir e fazer push da imagem Docker
  build-and-push:
    name: Build e Push Docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Fazer login no Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build e push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Gerar relatÃ³rio de vulnerabilidades
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload resultado do Trivy
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job para deploy em diferentes ambientes
  deploy:
    name: Deploy Docker
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://adminlte-prod.example.com' || 'https://adminlte-staging.example.com' }}
    
    steps:
    - name: Deploy para Staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "ðŸš€ Deploying Docker image to Staging..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        echo "Environment: Staging"
        # Aqui vocÃª adicionaria comandos especÃ­ficos para deploy
        # Exemplo: kubectl, docker-compose, etc.
        
    - name: Deploy para Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸš€ Deploying Docker image to Production..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo "Environment: Production"
        # Aqui vocÃª adicionaria comandos especÃ­ficos para deploy
        # Exemplo: kubectl, docker-compose, etc.
        
    - name: Notificar deploy
      run: |
        echo "âœ… Docker deploy completed successfully"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"

  # Job para limpeza de imagens antigas
  cleanup:
    name: Limpeza de Imagens
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Limpar imagens antigas
      run: |
        echo "ðŸ§¹ Cleaning up old Docker images..."
        echo "Keeping only the last 10 versions"
        # Aqui vocÃª adicionaria lÃ³gica para limpar imagens antigas
        # Exemplo: usando GitHub Packages API
