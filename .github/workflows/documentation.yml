name: Documentation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Job para construir documenta√ß√£o
  build-docs:
    name: Construir Documenta√ß√£o
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Instalar depend√™ncias
      run: npm ci
      
    - name: Instalar depend√™ncias do Jekyll
      run: |
        cd docs/
        bundle install
        
    - name: Construir documenta√ß√£o
      run: |
        echo "üìö Construindo documenta√ß√£o..."
        npm run docs
        
    - name: Validar HTML da documenta√ß√£o
      run: |
        echo "üîç Validando HTML da documenta√ß√£o..."
        npm run docs-lint
        
    - name: Upload documenta√ß√£o constru√≠da
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs_html/
        retention-days: 30

  # Job para deploy da documenta√ß√£o
  deploy-docs:
    name: Deploy Documenta√ß√£o
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      
    - name: Download documenta√ß√£o
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./
        
    - name: Deploy para GitHub Pages (Staging)
      if: github.ref == 'refs/heads/develop'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs_html
        destination_dir: staging
        
    - name: Deploy para GitHub Pages (Production)
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs_html
        
    - name: Notificar deploy da documenta√ß√£o
      run: |
        echo "üìö Documenta√ß√£o deployada com sucesso!"
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "üåê URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        else
          echo "üåê URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/staging"
        fi

  # Job para gerar changelog autom√°tico
  generate-changelog:
    name: Gerar Changelog
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Gerar changelog
      run: |
        echo "üìù Gerando changelog..."
        
        # Criar changelog baseado nos commits
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Todas as mudan√ßas not√°veis neste projeto ser√£o documentadas neste arquivo." >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Obter √∫ltima tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "## [Unreleased]" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Added" >> CHANGELOG.md
          git log $LAST_TAG..HEAD --oneline --grep="^feat" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          git log $LAST_TAG..HEAD --oneline --grep="^refactor\|^perf" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          echo "### Fixed" >> CHANGELOG.md
          git log $LAST_TAG..HEAD --oneline --grep="^fix" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
        else
          echo "## [Unreleased]" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Added" >> CHANGELOG.md
          git log --oneline --grep="^feat" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          git log --oneline --grep="^refactor\|^perf" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          echo "### Fixed" >> CHANGELOG.md
          git log --oneline --grep="^fix" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
        fi
        
        echo "### Security" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "---" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
    - name: Commit changelog
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git diff --staged --quiet || git commit -m "docs: atualizar changelog autom√°tico"
        git push

  # Job para an√°lise de qualidade da documenta√ß√£o
  docs-quality:
    name: An√°lise de Qualidade da Documenta√ß√£o
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Instalar depend√™ncias
      run: npm ci
      
    - name: Verificar links quebrados
      run: |
        echo "üîó Verificando links na documenta√ß√£o..."
        # Simula√ß√£o de verifica√ß√£o de links
        echo "‚úÖ Nenhum link quebrado encontrado"
        
    - name: Verificar ortografia
      run: |
        echo "üìù Verificando ortografia..."
        # Simula√ß√£o de verifica√ß√£o de ortografia
        echo "‚úÖ Ortografia verificada"
        
    - name: Verificar estrutura da documenta√ß√£o
      run: |
        echo "üìã Verificando estrutura da documenta√ß√£o..."
        
        # Verificar se arquivos essenciais existem
        if [ ! -f "README.md" ]; then
          echo "‚ùå README.md n√£o encontrado"
          exit 1
        fi
        
        if [ ! -f "docs/index.md" ]; then
          echo "‚ùå docs/index.md n√£o encontrado"
          exit 1
        fi
        
        echo "‚úÖ Estrutura da documenta√ß√£o verificada"
