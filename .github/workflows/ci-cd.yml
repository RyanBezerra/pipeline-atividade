name: CI/CD Pipeline - AdminLTE

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*', 'release/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Job de anÃ¡lise de cÃ³digo e qualidade
  code-quality:
    name: AnÃ¡lise de CÃ³digo e Qualidade
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Instalar dependÃªncias
      run: npm ci
      
    - name: Executar ESLint (AnÃ¡lise de JavaScript)
      run: npm run js-lint
      
    - name: Executar Stylelint (AnÃ¡lise de CSS/SCSS)
      run: npm run css-lint
      
    - name: Verificar lockfile
      run: npm run lockfile-lint
      
    - name: Upload resultados do ESLint
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-results
        path: .cache/.eslintcache
        
    - name: Upload resultados do Stylelint
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: stylelint-results
        path: .cache/.stylelintcache

  # Job de build e testes
  build-and-test:
    name: Build e Testes
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Instalar dependÃªncias
      run: npm ci
      
    - name: Executar build de produÃ§Ã£o
      run: npm run production
      
    - name: Executar testes
      run: npm run test
      
    - name: Verificar tamanho do bundle
      run: npm run bundlewatch
      
    - name: Upload arquivos de build
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          docs_html/
        retention-days: 7

  # Job de anÃ¡lise de seguranÃ§a
  security-scan:
    name: AnÃ¡lise de SeguranÃ§a
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Instalar dependÃªncias
      run: npm ci
      
    - name: Executar auditoria de seguranÃ§a
      run: npm audit --audit-level=moderate
      
    - name: Verificar vulnerabilidades conhecidas
      run: |
        npm audit --audit-level=high --json > audit-results.json || true
        cat audit-results.json

  # Job de deploy para diferentes ambientes
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        environment: 
          - name: staging
            condition: github.ref == 'refs/heads/develop'
          - name: production
            condition: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v4
      
    - name: Download arquivos de build
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./
        
    - name: Deploy para Staging
      if: matrix.environment.name == 'staging'
      run: |
        echo "ðŸš€ Deploying to Staging environment..."
        echo "Build files ready for staging deployment"
        # Aqui vocÃª adicionaria comandos especÃ­ficos para deploy no staging
        # Exemplo: rsync, scp, docker push, etc.
        
    - name: Deploy para Production
      if: matrix.environment.name == 'production'
      run: |
        echo "ðŸš€ Deploying to Production environment..."
        echo "Build files ready for production deployment"
        # Aqui vocÃª adicionaria comandos especÃ­ficos para deploy na produÃ§Ã£o
        # Exemplo: rsync, scp, docker push, etc.
        
    - name: Notificar deploy
      run: |
        echo "âœ… Deploy completed successfully for ${{ matrix.environment.name }}"
        echo "Environment: ${{ matrix.environment.name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"

  # Job de criaÃ§Ã£o de release
  create-release:
    name: Criar Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: startsWith(github.ref, 'refs/heads/release/')
    
    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Instalar dependÃªncias
      run: npm ci
      
    - name: Executar build de produÃ§Ã£o
      run: npm run production
      
    - name: Gerar changelog
      run: |
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## $(date +'%Y-%m-%d')" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --oneline --since="1 month ago" >> CHANGELOG.md
        
    - name: Criar release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
    - name: Upload assets do release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: adminlte-dist.zip
        asset_content_type: application/zip
